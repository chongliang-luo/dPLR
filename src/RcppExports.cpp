// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// PairwiseLik
Rcpp::List PairwiseLik(arma::vec yvec, arma::colvec z, arma::mat X, arma::vec index, arma::colvec beta, int grad);
RcppExport SEXP _dPLR_PairwiseLik(SEXP yvecSEXP, SEXP zSEXP, SEXP XSEXP, SEXP indexSEXP, SEXP betaSEXP, SEXP gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type yvec(yvecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type index(indexSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type grad(gradSEXP);
    rcpp_result_gen = Rcpp::wrap(PairwiseLik(yvec, z, X, index, beta, grad));
    return rcpp_result_gen;
END_RCPP
}
// PairwiseLikDeriv
Rcpp::List PairwiseLikDeriv(arma::vec yvec, arma::colvec z, arma::mat X, arma::colvec beta);
RcppExport SEXP _dPLR_PairwiseLikDeriv(SEXP yvecSEXP, SEXP zSEXP, SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type yvec(yvecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(PairwiseLikDeriv(yvec, z, X, beta));
    return rcpp_result_gen;
END_RCPP
}
// PairwiseLikDeriv1
Rcpp::List PairwiseLikDeriv1(arma::vec yvec, arma::colvec z, arma::mat X, arma::colvec beta);
RcppExport SEXP _dPLR_PairwiseLikDeriv1(SEXP yvecSEXP, SEXP zSEXP, SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type yvec(yvecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(PairwiseLikDeriv1(yvec, z, X, beta));
    return rcpp_result_gen;
END_RCPP
}
// PairwiseLikDeriv2
Rcpp::List PairwiseLikDeriv2(arma::vec yvec, arma::colvec z, arma::mat X, arma::colvec beta);
RcppExport SEXP _dPLR_PairwiseLikDeriv2(SEXP yvecSEXP, SEXP zSEXP, SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type yvec(yvecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(PairwiseLikDeriv2(yvec, z, X, beta));
    return rcpp_result_gen;
END_RCPP
}
// PairwiseLikDeriv3
Rcpp::List PairwiseLikDeriv3(arma::vec yvec, arma::colvec z, arma::mat X, arma::colvec beta);
RcppExport SEXP _dPLR_PairwiseLikDeriv3(SEXP yvecSEXP, SEXP zSEXP, SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type yvec(yvecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(PairwiseLikDeriv3(yvec, z, X, beta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dPLR_PairwiseLik", (DL_FUNC) &_dPLR_PairwiseLik, 6},
    {"_dPLR_PairwiseLikDeriv", (DL_FUNC) &_dPLR_PairwiseLikDeriv, 4},
    {"_dPLR_PairwiseLikDeriv1", (DL_FUNC) &_dPLR_PairwiseLikDeriv1, 4},
    {"_dPLR_PairwiseLikDeriv2", (DL_FUNC) &_dPLR_PairwiseLikDeriv2, 4},
    {"_dPLR_PairwiseLikDeriv3", (DL_FUNC) &_dPLR_PairwiseLikDeriv3, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_dPLR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
